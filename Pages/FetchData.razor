@page "/products"
@inject BlazorOnlineShop.Service.ProductService ProductService
@using BlazorOnlineShop.Shared

<h1>Products</h1>

<head>
    <link href="/css/app.css" rel="stylesheet" />
</head>


@if (DisplayedProducts != null && DisplayedProducts.Any())
{
    <table class="table table-striped" style="font-weight: bold;">
        
        <thead class="thead-dark">
            <tr>
                <th>Product ID</th>
                <th>Product Name</th>
                <th>Unit Price</th>
                <th>Unit In Stock</th>
                <th>Delivery on</th>
                <th>Image</th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var product in DisplayedProducts)
            {
                
                <tr style="@(product.UnitInStock == 0 ? "background-color: red; color: black;" : "")">
                    <td>@product.ProductId</td>
                    <td>@product.ProductName</td>
                    <td>@product.UnitPrice.ToString("0.00")</td>
                    <td>@product.UnitInStock</td>
                    <td>@product.DeliveryOn.ToShortDateString()</td>
                    <td>
                        <img src="@product.ImageUrl" alt="@product.ProductName" style="max-width: 100px; max-height: 100px;" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

    
    <div>
        <button disabled="@IsPreviousDisabled" @onclick="GoToPreviousPage">Previous</button>
        <span>Page @CurrentPage</span>
        <button disabled="@IsNextDisabled" @onclick="GoToNextPage">Next</button>
    </div>
}

else
{
    <p>No products available.</p>
}

@code {
    private List<Product> ProductsList;
    private List<Product> DisplayedProducts;
    private int PageSize = 7; 
    private int CurrentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        ProductsList = await ProductService.GetProductsAsync();
        UpdateDisplayedProducts();
    }

    private void UpdateDisplayedProducts()
    {
        int startIndex = (CurrentPage - 1) * PageSize;
        DisplayedProducts = ProductsList.Skip(startIndex).Take(PageSize).ToList();
    }

    private bool IsPreviousDisabled => CurrentPage == 1;
    private bool IsNextDisabled => (CurrentPage * PageSize) >= ProductsList.Count;

    private void GoToPreviousPage()
    {
        if (!IsPreviousDisabled)
        {
            CurrentPage--;
            UpdateDisplayedProducts();
        }
    }

    private void GoToNextPage()
    {
        if (!IsNextDisabled)
        {
            CurrentPage++;
            UpdateDisplayedProducts();
        }
    }
}
