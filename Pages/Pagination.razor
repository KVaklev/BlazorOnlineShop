@if (PageCount > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" disabled="@IsDisabled(1)" @onclick="() => ChangePage(1)">First</button>
            </li>
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" disabled="@IsDisabled(CurrentPage - 1)" @onclick="() => ChangePage(CurrentPage - 1)">Previous</button>
            </li>

            @for (int i = 1; i <= PageCount; i++)
            {
                <li class="page-item @(CurrentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                </li>
            }

            <li class="page-item @(CurrentPage == PageCount ? "disabled" : "")">
                <button class="page-link" disabled="@IsDisabled(CurrentPage + 1)" @onclick="() => ChangePage(CurrentPage + 1)">Next</button>
            </li>
            <li class="page-item @(CurrentPage == PageCount ? "disabled" : "")">
                <button class="page-link" disabled="@IsDisabled(PageCount)" @onclick="() => ChangePage(PageCount)">Last</button>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int PageCount { get; set; }
    [Parameter] public EventCallback<int> PageChanged { get; set; }

    private bool IsDisabled(int page) => page < 1 || page > PageCount;

    private async Task ChangePage(int page)
    {
        if (!IsDisabled(page))
        {
            CurrentPage = page;
            await PageChanged.InvokeAsync(CurrentPage);
        }
    }
}
